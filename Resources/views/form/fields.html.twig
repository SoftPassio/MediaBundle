{% block media_widget %}
    {% set allowed_mime_types = (form.vars.allowed_mime_types|length > 0) ? form.vars.allowed_mime_types|join(', ') : "*" %}
    {% spaceless %}
        {{ form_label(form) }}
        <div class="m-dropzone dz-clickable" data-action="{{ path('upload_media') }}" id="{{ id }}_container">
            <input type="hidden" id="{{ id }}" accept="{{ allowed_mime_types|cubeRaw }}" name="{{ full_name }}" value="{{ data is not empty ? data.id : '' }}">

            <div class="m-dropzone__msg dz-message">
                <h3 class="m-dropzone__msg-title">{{ 'media.form.title' | trans }}</h3>
            </div>
        </div>

        <script>
            (function() {
                var intiMedia = function () {
                    var url = '{{ path('upload_media', {'group': form.vars['group']}) }}';
                    var mediaDropzoneContainer = document.getElementById('{{ id }}_container');

                    Dropzone.prototype.defaultOptions.dictInvalidFileType = "Niepoprawny format pliku.";

                    new Dropzone("#{{ id }}_container", {
                        url: url,
                        parallelUploads: 1,
                        maxFiles: 1,
                        addRemoveLinks: true,
                        acceptedFiles: "{{ allowed_mime_types|cubeRaw }}",
                        dictRemoveFile: "{{ 'media.form.remove_file' | trans }}",
                        previewTemplate: '<div class="dz-preview dz-file-preview" style="display: inline-block">' +
                        '  <div class="dz-details">' +
                        '<div class="dz-filename"><span data-dz-name></span></div>' +
                        '<div class="dz-size" data-dz-size></div>' +
                        '    <img width="120" data-dz-thumbnail />' +
                        '  </div>' +
                        '  <div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress></span></div>' +
                        '   <div class="dz-error-message"><span data-dz-errormessage></span></div>' +
                        '</div>',
                        init: function () {
                            var thisDropzone = this;

                            var json = JSON.parse('{{ data|json_media }}');
                            if (Object.keys(json).length !== 0) {
                                var previewFile = {
                                    name: json.name,
                                    mimeType: json.mime_type,
                                    size: json.size
                                };

                                thisDropzone.emit("addedfile", previewFile);

                                if (previewFile.mimeType.match(/^image\/\w+/)) {
                                    thisDropzone.emit("thumbnail", previewFile, json.url);
                                }

                                thisDropzone.emit("complete", previewFile);
                            }

                            thisDropzone.on("addedfile", function (file) {
                                if (mediaDropzoneContainer.getElementsByClassName("dz-preview").length > 1) {
                                    mediaDropzoneContainer.removeChild(mediaDropzoneContainer.getElementsByClassName("dz-preview")[0])
                                }
                            });

                            thisDropzone.on("removedfile", function (file) {
                                document.getElementById('{{ id }}').value = null;
                            });

                            thisDropzone.on('complete', function (file) {
                                thisDropzone.options.maxFiles = thisDropzone.options.maxFiles + 1;

                            });
                        },
                        success: function (file, response) {
                            document.getElementById('{{ id }}').value = response.id;
                        },
                        error: function (file) {
                            if(file.size > {{ form.vars.max_size }}){
                                swal("{{ 'media.form.error.max_size' | trans }}", "{{ 'media.form.error.max_size_content' | trans({'%max_size%': form.vars.max_size/100000}) }}", "error");

                                this.removeFile(file);
                                return;
                            }
                            if(swal !== undefined){
                                swal("{{ 'media.form.error.invalid_mime_type' | trans }}", "{{ 'media.form.error.invalid_mime_type_content' | trans({'%mime_types%': allowed_mime_types|cubeRaw}) }}", "error");

                                this.removeFile(file);
                                return;
                            }
                        }
                    });
                };

                document.addEventListener("DOMContentLoaded", function(event) {
                    intiMedia();
                });
            })();
        </script>
    {% endspaceless %}
{% endblock %}
